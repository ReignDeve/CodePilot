diff --git a/src/Program.cs b/src/Program.cs
index 0123456..89abcde 100644
--- a/src/Program.cs
+++ b/src/Program.cs
@@ -1,12 +1,30 @@
 using System;
+using System.Collections.Generic;

 namespace MyApp
 {
-    class Program
+    /// <summary>
+    /// Entry point for the <c>MyApp</c> console application.
+    /// </summary>
+    public static class Program
     {
-        static void Main(string[] args)
+        /// <param name="args">Command-line arguments.</param>
+        public static void Main(string[] args)
         {
-            PrintNumbers();
+            var upperBound = args.Length > 0 && int.TryParse(args[0], out var parsed)
+                ? parsed
+                : 10;
+
+            PrintNumbersUpTo(upperBound);
         }

-        static void PrintNumbers()
+        /// <summary>
+        /// Prints numbers from 0 to <paramref name="max"/> (inclusive).
+        /// </summary>
+        /// <param name="max">Highest number to print.</param>
+        /// <exception cref="ArgumentOutOfRangeException">
+        /// Thrown when <paramref name="max"/> is negative.
+        /// </exception>
+        private static void PrintNumbersUpTo(int max)
         {
-            for (int i = 0; i < 5; i++) {
-                Console.WriteLine(i);
+            if (max < 0)
+                throw new ArgumentOutOfRangeException(nameof(max), "Value must be non-negative.");
+
+            for (var i = 0; i <= max; i++)
+            {
+                Console.WriteLine($"Number: {i}");
             }
         }
     }
diff --git a/src/Utilities/MathHelper.cs b/src/Utilities/MathHelper.cs
deleted file mode 100644
index f1e2d3c..0000000
--- a/src/Utilities/MathHelper.cs
+++ /dev/null
@@ -1,5 +0,0 @@
-namespace MyApp {
-    public static class MathHelper {
-        public static int Square(int n) {
-            return n * n;
-        }
-    }
-}
diff --git a/src/Utilities/MathHelper.cs b/src/Utilities/MathHelper.cs
new file mode 100644
index 0000000..4d5c6e7
--- /dev/null
+++ b/src/Utilities/MathHelper.cs
@@ -0,0 +1,20 @@
+ï»¿namespace MyApp.Utilities
+{
+    /// <summary>
+    ///     Utility math functions used across <c>MyApp</c>.
+    /// </summary>
+    public static class MathHelper
+    {
+        /// <summary>
+        /// Returns the square of <paramref name="n"/>.
+        /// </summary>
+        public static int Square(this int n) => n * n;
+
+        /// <summary>
+        /// Returns the cube of <paramref name="n"/>.
+        /// </summary>
+        public static int Cube(this int n) => n * n * n;
+
+        public static double Average(IEnumerable<int> values>) =>
+            values == null ? throw new ArgumentNullException(nameof(values)) : values.Average();
+    }
+}
