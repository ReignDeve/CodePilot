[
  {
    "uid": "for-loop-arrays",
    "status": "NotStarted",
    "title": "1. For Loop with Arrays",
    "difficulty": "Easy",
    "solution": "Use a standard for loop to iterate and push items.",
    "code": "public int[] IncrementArray(int[] nums) {\n    // TODO: implement increment logic\n}",
    "description": "Given an array of numbers, return a new array where each element is incremented by 1.\n\nYou may assume:\n- The input array nums contains at least one element.\n\nExample 1\nInput: nums = [1, 2, 3]\nOutput: [2, 3, 4]\n\nExample 2\nInput: nums = [0, -1, -2]\nOutput: [1, 0, -1]\n\nExample 3\nInput: nums = [5]\nOutput: [6]\n\nConstraints:\n- 1 ≤ nums.length ≤ 10⁴\n- -10⁹ ≤ nums[i] ≤ 10⁹"
  },
  {
    "uid": "filter-array-elements",
    "status": "InProgress",
    "title": "2. Filter Array Elements",
    "difficulty": "Medium",
    "solution": "Use Array.filter() with a condition function.",
    "code": "public int[] FilterArray(int[] nums, string criterion, int x = 0, int A = 0, int B = 0) {\n    // TODO: implement filter logic based on criterion\n}",
    "description": "Given an array of integers nums and a filter criterion, return a new array containing only those elements that satisfy the criterion.\n\nYou may assume:\n- The input array nums contains at least one element.\n- Exactly one of the following criteria is specified per call:\n  1. \"even\" numbers\n  2. Greater than a given value x\n  3. Within an inclusive range [A, B]\n\nYou must not modify the order of elements, and you may use each element only once.\n\nExample 1\nInput: nums = [3, 12, 7, 20, 5, 8, 33], criterion = \"even\"\nOutput: [12, 20, 8]\n\nExample 2\nInput: nums = [3, 12, 7, 20, 5, 8, 33], criterion = \"greater\", x = 10\nOutput: [12, 20, 33]\n\nExample 3\nInput: nums = [3, 12, 7, 20, 5, 8, 33], criterion = \"range\", A = 7, B = 20\nOutput: [7, 12, 20, 8]\n\nConstraints:\n- 1 ≤ nums.length ≤ 10⁴\n- -10⁹ ≤ nums[i], x, A, B ≤ 10⁹"
  },
  {
    "uid": "map-array-to-new-values",
    "status": "Completed",
    "title": "3. Map Array to New Values",
    "difficulty": "Easy",
    "solution": "Use Array.map() to return transformed items.",
    "code": "public string[] MapToUpper(string[] arr) {\n    // TODO: implement mapping to uppercase\n}",
    "description": "Given an array of strings, return a new array where each string is converted to uppercase.\n\nYou may assume:\n- The input array contains at least one string.\n\nExample 1\nInput: arr = [\"hello\", \"world\"]\nOutput: [\"HELLO\", \"WORLD\"]\n\nExample 2\nInput: arr = [\"Test\", \"Case\"]\nOutput: [\"TEST\", \"CASE\"]\n\nExample 3\nInput: arr = [\"a\", \"b\", \"c\"]\nOutput: [\"A\", \"B\", \"C\"]\n\nConstraints:\n- 1 ≤ arr.length ≤ 10⁴\n- 1 ≤ arr[i].length ≤ 100"
  },
  {
    "uid": "reduce-array-to-single-value",
    "status": "NotStarted",
    "title": "4. Reduce Array to Single Value",
    "difficulty": "Hard",
    "solution": "Use Array.reduce() with accumulator logic.",
    "code": "public int SumArray(int[] nums) {\n    // TODO: implement summation logic\n}",
    "description": "Given an array of numbers, return the sum of all elements using reduce.\n\nYou may assume:\n- The input array contains at least one number.\n\nExample 1\nInput: nums = [5, 10, 15]\nOutput: 30\n\nExample 2\nInput: nums = [1, 1, 1, 1]\nOutput: 4\n\nExample 3\nInput: nums = [-5, 5]\nOutput: 0\n\nConstraints:\n- 1 ≤ nums.length ≤ 10⁴\n- -10⁹ ≤ nums[i] ≤ 10⁹"
  },
  {
    "uid": "nested-loops-for-matrix",
    "status": "InProgress",
    "title": "5. Nested Loops for Matrix",
    "difficulty": "Medium",
    "solution": "Use two nested for loops to access matrix elements.",
    "code": "public int[] FlattenMatrix(int[][] matrix) {\n    // TODO: implement flatten logic\n}",
    "description": "Given a 2D array (matrix), return a flat array of all elements in row-major order using nested loops.\n\nYou may assume:\n- The matrix contains at least one row.\n\nExample 1\nInput: matrix = [[1, 2], [3, 4]]\nOutput: [1, 2, 3, 4]\n\nExample 2\nInput: matrix = [[5]]\nOutput: [5]\n\nExample 3\nInput: matrix = [[1, 2, 3], [4, 5, 6]]\nOutput: [1, 2, 3, 4, 5, 6]\n\nConstraints:\n- 1 ≤ matrix.length, matrix[i].length ≤ 10³\n- -10⁹ ≤ matrix[i][j] ≤ 10⁹"
  }
]
